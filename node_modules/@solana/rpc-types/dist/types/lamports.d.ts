import { Codec, Decoder, Encoder, FixedSizeCodec, FixedSizeDecoder, FixedSizeEncoder } from '@solana/codecs-core';
import { NumberCodec, NumberDecoder, NumberEncoder } from '@solana/codecs-numbers';
export type LamportsUnsafeBeyond2Pow53Minus1 = bigint & {
    readonly __brand: unique symbol;
};
export declare function isLamports(putativeLamports: bigint): putativeLamports is LamportsUnsafeBeyond2Pow53Minus1;
export declare function assertIsLamports(putativeLamports: bigint): asserts putativeLamports is LamportsUnsafeBeyond2Pow53Minus1;
export declare function lamports(putativeLamports: bigint): LamportsUnsafeBeyond2Pow53Minus1;
type ExtractAdditionalProps<T, U> = Omit<T, keyof U>;
export declare function getDefaultLamportsEncoder(): FixedSizeEncoder<LamportsUnsafeBeyond2Pow53Minus1, 8>;
export declare function getLamportsEncoder<TEncoder extends NumberEncoder>(innerEncoder: TEncoder): Encoder<LamportsUnsafeBeyond2Pow53Minus1> & ExtractAdditionalProps<TEncoder, NumberEncoder>;
export declare function getDefaultLamportsDecoder(): FixedSizeDecoder<LamportsUnsafeBeyond2Pow53Minus1, 8>;
export declare function getLamportsDecoder<TDecoder extends NumberDecoder>(innerDecoder: TDecoder): Decoder<LamportsUnsafeBeyond2Pow53Minus1> & ExtractAdditionalProps<TDecoder, NumberDecoder>;
export declare function getDefaultLamportsCodec(): FixedSizeCodec<LamportsUnsafeBeyond2Pow53Minus1, LamportsUnsafeBeyond2Pow53Minus1, 8>;
export declare function getLamportsCodec<TCodec extends NumberCodec>(innerCodec: TCodec): Codec<LamportsUnsafeBeyond2Pow53Minus1, LamportsUnsafeBeyond2Pow53Minus1> & ExtractAdditionalProps<TCodec, NumberCodec>;
export {};
//# sourceMappingURL=lamports.d.ts.map