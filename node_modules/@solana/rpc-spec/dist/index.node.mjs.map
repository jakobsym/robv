{"version":3,"sources":["../src/rpc.ts","../src/rpc-api.ts"],"names":[],"mappings":";;;AAkCO,SAAS,UACZ,SACgB,EAAA;AAChB,EAAA,OAAO,UAAU,SAAS,CAAA,CAAA;AAC9B,CAAA;AAEA,SAAS,UACL,SACgB,EAAA;AAChB,EAAO,OAAA,IAAI,KAAM,CAAA,SAAA,CAAU,GAAK,EAAA;AAAA,IAC5B,cAAiB,GAAA;AACb,MAAO,OAAA,KAAA,CAAA;AAAA,KACX;AAAA,IACA,cAAiB,GAAA;AACb,MAAO,OAAA,KAAA,CAAA;AAAA,KACX;AAAA,IACA,GAAA,CAAI,MAAQ,EAAA,CAAA,EAAG,QAAU,EAAA;AACrB,MAAA,OAAO,YAAa,SAAsB,EAAA;AACtC,QAAM,MAAA,UAAA,GAAa,EAAE,QAAS,EAAA,CAAA;AAC9B,QAAA,MAAM,gBAAmB,GAAA,OAAA,CAAQ,GAAI,CAAA,MAAA,EAAQ,YAAY,QAAQ,CAAA,CAAA;AACjE,QAAM,MAAA,UAAA,GAAa,mBACb,gBAAiB,CAAA,GAAG,SAAS,CAC7B,GAAA,EAAE,UAAY,EAAA,MAAA,EAAQ,SAAU,EAAA,CAAA;AACtC,QAAO,OAAA,uBAAA,CAAwB,WAAW,UAAU,CAAA,CAAA;AAAA,OACxD,CAAA;AAAA,KACJ;AAAA,GACH,CAAA,CAAA;AACL,CAAA;AAEA,SAAS,uBAAA,CACL,WACA,cAC4B,EAAA;AAC5B,EAAO,OAAA;AAAA,IACH,MAAM,KAAK,OAA8C,EAAA;AACrD,MAAA,MAAM,EAAE,UAAA,EAAY,MAAQ,EAAA,mBAAA,EAAwB,GAAA,cAAA,CAAA;AACpD,MAAM,MAAA,OAAA,GAAU,gBAAiB,CAAA,UAAA,EAAY,MAAM,CAAA,CAAA;AACnD,MAAM,MAAA,QAAA,GAAW,MAAM,SAAA,CAAU,SAAgC,CAAA;AAAA,QAC7D,OAAA;AAAA,QACA,QAAQ,OAAS,EAAA,WAAA;AAAA,OACpB,CAAA,CAAA;AACD,MAAA,OAAQ,mBAAsB,GAAA,mBAAA,CAAoB,QAAU,EAAA,UAAU,CAAI,GAAA,QAAA,CAAA;AAAA,KAC9E;AAAA,GACJ,CAAA;AACJ,CAAA;;;ACvDO,SAAS,aAAgD,MAA4C,EAAA;AACxG,EAAO,OAAA,IAAI,KAAM,CAAA,EAA2B,EAAA;AAAA,IACxC,cAAiB,GAAA;AACb,MAAO,OAAA,KAAA,CAAA;AAAA,KACX;AAAA,IACA,cAAiB,GAAA;AACb,MAAO,OAAA,KAAA,CAAA;AAAA,KACX;AAAA,IACA,OACO,IACL,EAAA;AACE,MAAM,MAAA,CAAC,CAAG,EAAA,CAAC,CAAI,GAAA,IAAA,CAAA;AACf,MAAM,MAAA,UAAA,GAAa,EAAE,QAAS,EAAA,CAAA;AAC9B,MAAA,OAAO,YACA,SAG6C,EAAA;AAChD,QAAA,MAAM,SAAS,MAAQ,EAAA,qBAAA,GACjB,QAAQ,qBAAsB,CAAA,SAAA,EAAW,UAAU,CACnD,GAAA,SAAA,CAAA;AACN,QAAA,MAAM,sBAAsB,MAAQ,EAAA,mBAAA,GAC9B,MAAQ,EAAA,mBAAA,GACR,CAAC,WAAyB,KAAA,WAAA,CAAA;AAChC,QAAO,OAAA;AAAA,UACH,UAAA;AAAA,UACA,MAAA;AAAA,UACA,mBAAA;AAAA,SACJ,CAAA;AAAA,OACJ,CAAA;AAAA,KACJ;AAAA,GACH,CAAA,CAAA;AACL","file":"index.node.mjs","sourcesContent":["import {\n    Callable,\n    createRpcMessage,\n    Flatten,\n    OverloadImplementations,\n    RpcResponse,\n    UnionToIntersection,\n} from '@solana/rpc-spec-types';\n\nimport { RpcApi } from './rpc-api';\nimport { PendingRpcRequest, RpcRequest, RpcSendOptions } from './rpc-request';\nimport { RpcTransport } from './rpc-transport';\n\nexport type RpcConfig<TRpcMethods, TRpcTransport extends RpcTransport> = Readonly<{\n    api: RpcApi<TRpcMethods>;\n    transport: TRpcTransport;\n}>;\n\nexport type Rpc<TRpcMethods> = {\n    [TMethodName in keyof TRpcMethods]: PendingRpcRequestBuilder<OverloadImplementations<TRpcMethods, TMethodName>>;\n};\n\ntype PendingRpcRequestBuilder<TMethodImplementations> = UnionToIntersection<\n    Flatten<{\n        [P in keyof TMethodImplementations]: PendingRpcRequestReturnTypeMapper<TMethodImplementations[P]>;\n    }>\n>;\n\ntype PendingRpcRequestReturnTypeMapper<TMethodImplementation> =\n    // Check that this property of the TRpcMethods interface is, in fact, a function.\n    TMethodImplementation extends Callable\n        ? (...args: Parameters<TMethodImplementation>) => PendingRpcRequest<ReturnType<TMethodImplementation>>\n        : never;\n\nexport function createRpc<TRpcMethods, TRpcTransport extends RpcTransport>(\n    rpcConfig: RpcConfig<TRpcMethods, TRpcTransport>,\n): Rpc<TRpcMethods> {\n    return makeProxy(rpcConfig) as Rpc<TRpcMethods>;\n}\n\nfunction makeProxy<TRpcMethods, TRpcTransport extends RpcTransport>(\n    rpcConfig: RpcConfig<TRpcMethods, TRpcTransport>,\n): Rpc<TRpcMethods> {\n    return new Proxy(rpcConfig.api, {\n        defineProperty() {\n            return false;\n        },\n        deleteProperty() {\n            return false;\n        },\n        get(target, p, receiver) {\n            return function (...rawParams: unknown[]) {\n                const methodName = p.toString();\n                const createRpcRequest = Reflect.get(target, methodName, receiver);\n                const newRequest = createRpcRequest\n                    ? createRpcRequest(...rawParams)\n                    : { methodName, params: rawParams };\n                return createPendingRpcRequest(rpcConfig, newRequest);\n            };\n        },\n    }) as Rpc<TRpcMethods>;\n}\n\nfunction createPendingRpcRequest<TRpcMethods, TRpcTransport extends RpcTransport, TResponse>(\n    rpcConfig: RpcConfig<TRpcMethods, TRpcTransport>,\n    pendingRequest: RpcRequest<TResponse>,\n): PendingRpcRequest<TResponse> {\n    return {\n        async send(options?: RpcSendOptions): Promise<TResponse> {\n            const { methodName, params, responseTransformer } = pendingRequest;\n            const payload = createRpcMessage(methodName, params);\n            const response = await rpcConfig.transport<RpcResponse<unknown>>({\n                payload,\n                signal: options?.abortSignal,\n            });\n            return (responseTransformer ? responseTransformer(response, methodName) : response) as TResponse;\n        },\n    };\n}\n","import { Callable } from '@solana/rpc-spec-types';\n\nimport { RpcRequest } from './rpc-request';\n\nexport type RpcApiConfig = Readonly<{\n    parametersTransformer?: <T extends unknown[]>(params: T, methodName: string) => unknown;\n    responseTransformer?: <T>(response: unknown, methodName?: string) => T;\n}>;\n\nexport type RpcApi<TRpcMethods> = {\n    [MethodName in keyof TRpcMethods]: RpcReturnTypeMapper<TRpcMethods[MethodName]>;\n};\n\ntype RpcReturnTypeMapper<TRpcMethod> = TRpcMethod extends Callable\n    ? (...rawParams: unknown[]) => RpcRequest<ReturnType<TRpcMethod>>\n    : never;\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype RpcApiMethod = (...args: any) => any;\nexport interface RpcApiMethods {\n    [methodName: string]: RpcApiMethod;\n}\n\nexport function createRpcApi<TRpcMethods extends RpcApiMethods>(config?: RpcApiConfig): RpcApi<TRpcMethods> {\n    return new Proxy({} as RpcApi<TRpcMethods>, {\n        defineProperty() {\n            return false;\n        },\n        deleteProperty() {\n            return false;\n        },\n        get<TMethodName extends keyof RpcApi<TRpcMethods>>(\n            ...args: Parameters<NonNullable<ProxyHandler<RpcApi<TRpcMethods>>['get']>>\n        ) {\n            const [_, p] = args;\n            const methodName = p.toString() as keyof TRpcMethods as string;\n            return function (\n                ...rawParams: Parameters<\n                    TRpcMethods[TMethodName] extends CallableFunction ? TRpcMethods[TMethodName] : never\n                >\n            ): RpcRequest<ReturnType<TRpcMethods[TMethodName]>> {\n                const params = config?.parametersTransformer\n                    ? config?.parametersTransformer(rawParams, methodName)\n                    : rawParams;\n                const responseTransformer = config?.responseTransformer\n                    ? config?.responseTransformer<ReturnType<TRpcMethods[TMethodName]>>\n                    : (rawResponse: unknown) => rawResponse as ReturnType<TRpcMethods[TMethodName]>;\n                return {\n                    methodName,\n                    params,\n                    responseTransformer,\n                };\n            };\n        },\n    });\n}\n"]}